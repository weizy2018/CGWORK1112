// MPolygon.cpp: implementation of the MPolygon class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "CGWORK1112.h"
#include "MPolygon.h"
#include "Line.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

MPolygon::MPolygon()
{
	count = 0;

}

MPolygon::~MPolygon()
{

}
void MPolygon::draw(CDC * pDC, COLORREF color) {
	int i, j;
	for (i = 0; i < count - 1; i++) {
		Line line(points[i], points[i+1]);
		line.draw(pDC, color);
	}
	Line li(points[count - 1], points[0]);
	li.draw(pDC, color);
	bool two[30][16] = 
					{{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
					{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
	//width = (16+4)*5
	//heigh = 30+8
	int min_x = points[0].x;
	int max_x = points[0].x;
	int min_y = points[0].y;
	int max_y = points[0].y;
	for (i = 1; i < count; i++) {
		if (points[i].x < min_x)
			min_x = points[i].x;
		if (points[i].x > max_x)
			max_x = points[i].x;
		if (points[i].y < min_y)
			min_y = points[i].y;
		if (points[i].y > max_y)
			max_y = points[i].y;
	}
	




}

int MPolygon::getType() {
	return POLYGON;
}

void MPolygon::addPoint(CPoint point) {
	points[count] = point;
	count++;
}


